"""
演示对序列的切片操作

语法：序列[起始下标:结束下标:步长]
表示从从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新的序列，不好含结束位置的元素

- 起始下标表示从何处开始，可以留空，留空视作从头开始
- 结束下标（不含）表示从何处开始，可以留空，留空视作截取到结尾
- 步长，表示依次取元素的间隔

步长1表示一个个的取元素
步长2表示跳过一个元素取
步长N表示。每次跳过N-1个元素取
步长为负数，反向取（注意，起始下标和结束下标也要反向标）


"""

my_list = [0, 1, 2, 3, 4, 5, 6]

result1 = my_list[1:4]  #步长默认是1可以省略不写
print(f'结果1:{result1}')

# 对tuple进行切片从头开始到最后结束，步长为1
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result2 = my_tuple[:]  #起始和结束不写表示从头到尾，步长为1可以省略
print(f'结果2:{result2}')


# 对str进行切片，从头开始到最后结束，步长为2
my_str = '0123456'
result3 = my_str[::2]
print(f'结果3:{result3}')

# 对str进行切片，从头开始到最后结束，步长为-1
my_str = '0123456'
result4 = my_str[::-1]
print(f'结果4:{result4}')

# 对列表进行切片从3开始到1结束，步长为-1
my_list = [0, 1, 2, 3, 4, 5, 6]
result5 = my_list[3:1:-1]
print(f'结果5:{result5}')

# 对元组进行切片，从头开始到尾结束步长-2
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result6 = my_tuple[::-2]
print(f'结果6:{result6}')